<< (include "./coc.slog") >>
; a test program

; PROGRAM_BEGIN

; in CoC, adt K is a expression (a forall Prop) rather than a type
; but `Proof K` is a type
; â„• : expr
;
(Type "nat" (Prop))
(Expr "nat"
    ('forall~ (var "a") (Prop)
        ('forall~ (var "z") (Proof (ref "a"))
        ('forall~ (var "s") ('Pi~ (var "'rightarrow~") (Proof (ref "a")) (Proof (ref "a")))
    (ref "a")))))
; ('forall~ (var 0) (Prop ) ('forall~ (var 1) (Proof (ref 0)) ('forall~ (var 2) ('Pi~ (var 2) (Proof (ref 0)) (Proof (ref 0))) (ref 0))))
; print debruijn indexed version of nat

; abbreviate
('nat~ (Proof {Expr "nat"}))
(Type "zero" {'nat~})
(Expr "zero"
    ('lambda~ (var "a") (Prop)
        ('lambda~ (var "z") (Proof (ref "a"))
        ('lambda~ (var "s") ('Pi~ (var "'rightarrow~") (Proof (ref "a")) (Proof (ref "a")))
    (ref "z")))))
(Type "succ" ('Pi~ (var "'rightarrow~") {'nat~} {'nat~}))
(Expr "succ"
    ('lambda~ (var "n")  {'nat~}
    ('lambda~ (var "a") (Prop)
        ('lambda~ (var "z") (Proof (ref "a"))
        ('lambda~ (var "s") ('Pi~ (var "'rightarrow~") (Proof (ref "a")) (Proof (ref "a")))
    (app (ref "s")
         (app (app (app (ref "n") (ref "a"))
                   (ref "z"))
              (ref "s"))))))))

; refined debug info
