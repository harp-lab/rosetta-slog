
; --------------------------------------------------------------
('in~ ?(ctx bind rest) bind)
[('in~ res (term-bind x xt)) (=/= x y) --> ('in~ ?(ctx (term-bind y yt) res)  (term-bind x xt))]
[('in~ res (type-bind x xt)) (=/= x y) --> ('in~ ?(ctx (type-bind y yt) res)  (type-bind x xt))]

; context order is defined by transitive closure on context
(ctx-'sqsubseteq~ res ?(ctx b res))
[(ctx-'sqsubseteq~ c a) <-- (= mid (ctx bind c)) (ctx-'sqsubseteq~ mid a)]

; --------------------------------------------------------------
; start from everything in global define space

; define context
(coc-ctx? ?('mt~))
[(coc-ctx? ?(ctx bind rest)) <--
    (coc-ctx? rest)
    (coc-bind? bind)]
; define binding
[(coc-bind? ?(term-bind x T)) <--
    (var x)
    (coc-type? T)]
[(coc-bind? ?(type-bind X K)) <--
    (t-var X)
    (coc-kind? K)]

; term-in-ctx 2 arities
; `t` is a expression in context `'Gamma~`
[(coc-term-in-ctx? ?(term-in-ctx 'Gamma~ t)) <--
    (coc-expr? t)
    (coc-ctx? 'Gamma~)]

; t-var x
[(term-in-ctx 'Gamma~ (t-app T t)) --> (term-in-ctx 'Gamma~ T) (term-in-ctx 'Gamma~ t)]
[(term-in-ctx 'Gamma~ ('Pi~ (var x) T K)) -->
    (term-in-ctx 'Gamma~ T)
    (term-in-ctx (ctx (term-bind x T) 'Gamma~) K)]
; Prop and * are in any context
[(term-in-ctx 'Gamma~ (Prop)) (term-in-ctx 'Gamma~ ('star~)) <-- (coc-ctx? 'Gamma~)]
[(term-in-ctx 'Gamma~ (Proof t)) --> (term-in-ctx 'Gamma~ t)]
; var
[(term-in-ctx 'Gamma~ (Expr _ expr)) --> (term-in-ctx 'Gamma~ expr)]
[(term-in-ctx 'Gamma~ (Type tname expr)) --> (term-in-ctx 'Gamma~ expr)]
[(term-in-ctx 'Gamma~ ('lambda~ (var x) T t)) -->
    (term-in-ctx 'Gamma~ T)
    (term-in-ctx (ctx (term-bind x T) 'Gamma~) t)]
[(term-in-ctx 'Gamma~ (app x y)) -->
    (term-in-ctx 'Gamma~ x)
    (term-in-ctx 'Gamma~ y)]
[(term-in-ctx 'Gamma~ ('forall~ (var x) T t)) -->
    (term-in-ctx 'Gamma~ T)
    (term-in-ctx (ctx (term-bind x T) 'Gamma~) t)]

[(top p) --> (term-in-ctx ('mt~) p)]
[(term-in-ctx 'Gamma~ ('line~ e res)) -->
    (term-in-ctx 'Gamma~ e)
    (term-in-ctx 'Gamma~ res)]

[(warnning "expr-not-in-ctx" e) <-- (coc-expr? e) (~ term-in-ctx _ e)]
