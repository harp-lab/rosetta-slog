
; pure first order dependent type ('lambda~LF)
; based on advance topic in type and programming language
; Charpter 2.2

; term
; var
(var "x")
; abstraction
('lambda~ "x" (var "x"))
; application
(app ('lambda~ "x" (var "x")) (var "y"))

; term helper predicate
(term-not-'lambda~ ?(var x))
(term-not-'lambda~ ?(app func arg))

; types
; type/family var
(type "T")
; dependent product type
('Pi~ "x" (type "T") (type "T"))
; type family application
(type-app (type "T") (var "x"))

; kind
; kind of proper type
('star~)
; kind of type family
('Pi~ "x" (type "T") ('star~))

; context
('mt~)
(ctx (term-bind "x" (type "T"))
    (ctx (type-bind (type "X") ('star~))
        ('mt~)))

; ---------------------------------------------
; typing rule helper functions

; predicate if binding is in an context
('in~ ?(ctx bind rest) bind)
[('in~ res bind1) --> ('in~ ?(ctx bind res) bind1)]

; free variable
(free-var-huh ?(check-fv x (var x)) ('top~))
[(=/= x y) --> (free-var-huh ?(check-fv x (var y)) ('bot~))]

(free-var-huh ?(check-fv x ('lambda~ x T body)) ('bot~))
[(free-var-huh ?(check-fv x ('lambda~ y T body)) ('top~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x body) ('top~))
    (free-var-huh !(check-fv x T) ('top~))]
[(free-var-huh ?(check-fv x ('lambda~ y T body)) ('bot~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x body) ('bot~))]
[(free-var-huh ?(check-fv x ('lambda~ y T body)) ('bot~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x T) ('bot~))]

[(free-var-huh ?(check-fv x (app func arg)) ('top~)) <--
    (free-var-huh !(check-fv x func) ('top~))
    (free-var-huh !(check-fv x arg) ('top~))]
[(free-var-huh ?(check-fv x (app func arg)) ('bot~)) <--
    (free-var-huh !(check-fv x func) ('bot~))]
[(free-var-huh ?(check-fv x (app func arg)) ('bot~)) <--
    (free-var-huh !(check-fv x arg) ('bot~))]

(free-var-huh ?(check-fv x (type T-name)) ('bot~))

(free-var-huh ?(check-fv x ('Pi~ x T K)) ('bot~))
[(free-var-huh ?(check-fv x ('Pi~ y T K)) ('top~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x T) ('top~))
    (free-var-huh !(check-fv x K) ('top~))]
[(free-var-huh ?(check-fv x ('Pi~ y T K)) ('bot~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x T) ('bot~))]
[(free-var-huh ?(check-fv x ('Pi~ y T K)) ('bot~)) <--
    (=/= x y)
    (free-var-huh !(check-fv x K) ('bot~))]

[(free-var-huh ?(check-fv x (type-app T-func t-arg)) ('top~)) <--
    (free-var-huh !(check-fv x T-func) ('top~))
    (free-var-huh !(check-fv x t-arg) ('top~))]
[(free-var-huh ?(check-fv x (type-app T-func t-arg)) ('bot~)) <--
    (free-var-huh !(check-fv x T-func) ('bot~))]
[(free-var-huh ?(check-fv x (type-app T-func t-arg)) ('bot~)) <--
    (free-var-huh !(check-fv x t-arg) ('bot~))]

(free-var-huh ?(check-fv x ('star~)) ('bot~))
; free var for pi in kind is covered by free var for pi in type

; NOTE subst here is not capture avoiding
; substitution for term in kind
(subst-kind ?(do-subst-kind x t ('star~)) ('star~))
[(subst-kind
    ?(do-subst-kind x t
        ('Pi~ xk T K))
    ('Pi~ xk T-substed K-substed)) <--
    (subst-type !(do-subst-type x t T) T-substed)
    (subst-kind !(do-subst-kind x t K) K-substed)]
; substitution for term in type
(subst-type ?(do-subst-type x t (type T-name)) (type T-name))
[(subst-type
    ?(do-subst-type x t
        ('Pi~ T-arg T-Targ T-body))
    ('Pi~ T-arg T-Targ-substed T-body-substed)) <--
    (subst-type !(do-subst-type x t T-Targ) T-Targ-substed)
    (subst-type !(do-subst-type x t T-body) T-body-substed)]
[(subst-type
    ?(do-subst-type x t
        (type-app T-func t-arg))
    (type-app T-func-substed t-arg-substed)) <--
    (subst-type !(do-subst-type x t T-func) T-func-substed)
    (subst-term !(do-subst-term x t t-arg) t-arg-substed)]
; substitution for term in term
(subst-term ?(do-subst-term x t (var x)) t)
[(=/= x y) --> (subst-term ?(do-subst-term x t (var y)) (var y)))]
;
[(subst-term ?(do-subst-term x t ('lambda~ arg T-arg body))
    ('lambda~ arg T-arg-substed body-substed)) <--
    (subst-term !(do-subst-term x t body) body-substed)
    (subst-type !(do-subst-type x t T-arg) T-arg-substed)]
[(subst-term ?(do-subst-term x t (app func arg))
    (app func-substed arg-substed)) <--
    (subst-term !(do-subst-term x t func) func-substed)
    (subst-term !(do-subst-term x t arg) arg-substed)]

; materialize & rename, make it reads better
[('mapsto~ x t K K-substed) <-- (subst-kind ?(do-subst-kind x t K) K-substed)]
[('mapsto~ x t T T-substed) <-- (subst-type ?(do-subst-type x t T) T-substed)]
[('mapsto~ x t t t-substed) <-- (subst-term ?(do-subst-term x t t) t-substed)]

; ---------------------------------------------
; typing rules

; well-formed kind [Γ ⊢ K]
('Downarrow~ "wf-star"
    ('mt~)
    (conclusion ?('vdash~ ('star~) 'Gamma~)))
('Downarrow~ "wf-pi"
    (premise2 ?('vdash~ (type-bind T ('star~)) 'Gamma~)
              ?('vdash~ K (ctx (term-bind x T) 'Gamma~)))
    (conclusion ?('vdash~ ('Pi~ x T K) 'Gamma~)))
; kinding [Γ ⊢ T::K]
('Downarrow~ "k-var"
    (premise2 ?('in~ 'Gamma~ ?(type-bind T K))
              ?('vdash~ K 'Gamma~))
    (conclusion ?('vdash~ (type-bind X K) 'Gamma~)))
('Downarrow~ "k-pi"
    (premise2 ?('vdash~ (type-bind T1 ('star~)) 'Gamma~)
              ?('vdash~ (type-bind T2 ('star~)) (ctx (term-bind x T1) 'Gamma~)))
    (conclusion ?('vdash~ (type-bind ('Pi~ x T1 T2) ('star~)) 'Gamma~)))
('Downarrow~ "k-app"
    (premise2 ?('vdash~ (type-bind S ('Pi~ x T K)) 'Gamma~')
              ?('vdash~ (term-bind t T)))
    (conclusion ?('vdash~ {'mapsto~ x t K} 'Gamma~)))
('Downarrow~ "k-conv"
    (premise2 ?('vdash~ (type-bind T K) 'Gamma~)
              ?('vdash~ ('equiv~ K K') 'Gamma~))
    (conclusion ?('vdash~ (type-bind T K') 'Gamma~)))
; typing [Γ 'vdash~ t : T]
('Downarrow~ "t-var"
    (premise2 ?('in~ 'Gamma~ ?(term-bind x T))
              ?('vdash~ (type-bind T ('star~)) 'Gamma~))
    (conclusion ?('vdash~ (term-bind x T) 'Gamma~)))
('Downarrow~ "t-abs"
    (premise2 ?('vdash~ (type-bind S ('star~)) 'Gamma~)
              ?('vdash~ (term-bind t T) (ctx (term-bind x T) 'Gamma~)))
    (conclusion ?('vdash~ (term-bind ('lambda~ x S t) ('Pi~ x S T)) 'Gamma~)))
('Downarrow~ "t-app"
    (premise2 ?('vdash~ (term-bind t1 ('Pi~ x S T)) 'Gamma~)
              ?('vdash~ (term-bind t2 S) 'Gamma~))
    (conclusion ?('vdash~ (term-bind (app t1 t2) {'mapsto~ x t2 T}) 'Gamma~)))
('Downarrow~ "t-conv"
    (premise2 ?('vdash~ (term-bind t T) 'Gamma~)
              ?('vdash~ (type-bind ('equiv~ T T') ('star~)) 'Gamma~))
    (conclusion ?('vdash~ (term-bind t T') 'Gamma~)))
; Kind Equivalence [Γ ⊢ K ≡ K']
('Downarrow~ "qk-pi"
    (premise2 ?('vdash~ (type-bind ('equiv~ T1 T2) ('star~)) 'Gamma~)
              ?('vdash~ (type-bind ('equiv~ K1 K2)) (ctx (term-bind x T1) 'Gamma~)))
    (conclusion ?('vdash~ ('equiv~ ('Pi~ x T1 K1) 
                       ('Pi~ x T2 K2)) 'Gamma~)))
('Downarrow~ "qk-refl"
    (premise1 ?('vdash~ K 'Gamma~))
    (conclusion ?('vdash~ ('equiv~ K K) 'Gamma~)))
('Downarrow~ "qk-sym"
    (premise1 ?('vdash~ ('equiv~ K1 K2) 'Gamma~))
    (conclusion ?('vdash~ ('equiv~ K2 K1) 'Gamma~)))
('Downarrow~ "qk-trans"
    (premise2 ?('vdash~ ('equiv~ K1 K2) 'Gamma~)
              ?('vdash~ ('equiv~ K2 K3) 'Gamma~))
    (conclusion ?('vdash~ ('equiv~ K1 K3) 'Gamma~)))
; Type Equivalence [Γ ⊢ S ≡ T :: K]
('Downarrow~ "qt-pi"
    (premise2 ?('vdash~ (type-bind ('equiv~ S1 T2) ('star~)) 'Gamma~)
              ?('vdash~ (type-bind ('equiv~ S2 T2) ('star~)) (ctx (term-bind x T1) 'Gamma~)))
    (conclusion ?('vdash~ (type-bind ('equiv~ ('Pi~ x S1 S2) 
                           ('Pi~ x T1 T2))
                        ('star~)) 'Gamma~)))
('Downarrow~ "qt-app"
    (premise2 ?('vdash~ (type-bind ('equiv~ S1 S1) ('Pi~ x T K)) 'Gamma~)
              ?('vdash~ (term-bind ('equiv~ t1 t2) T) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ (type-app S1 t1) 
                          (type-app S2 t2))
                       {'mapsto~ x t1 K}) 'Gamma~)))
('Downarrow~ "qt-refl"
    (premise1 ?('vdash~ (term-bind T K) 'Gamma~))               ; why it is term-bind? not type-bind?
    (conclusion ?('vdash~ (type-bind ('equiv~ T T) K) 'Gamma~)))
('Downarrow~ "qt-refl-2"
    (premise1 ?('vdash~ (type-bind T K) 'Gamma~))               ; maybe this is correct?
    (conclusion ?('vdash~ (type-bind ('equiv~ T T) K) 'Gamma~)))
('Downarrow~ "qt-sym"
    (premise1 ?('vdash~ (type-bind ('equiv~ T S) K) 'Gamma~))
    (conclusion ?('vdash~ (type-bind ('equiv~ S T) K) 'Gamma~)))
('Downarrow~ "qt-trans"
    (premise2 ?('vdash~ (type-bind ('equiv~ S U) K) 'Gamma~)
              ?('vdash~ (type-bind ('equiv~ U T) K) 'Gamma~))
    (conclusion ?('vdash~ (type-bind ('equiv~ S T) K) 'Gamma~)))
; term equivalence [Γ ⊢ t1≡t2 : T]
('Downarrow~ "q-abs"
    (premise2 ?('vdash~ (type-bind ('equiv~ S1 S2) ('star~)) 'Gamma~)
              ?('vdash~ (term-bind ('equiv~ t1 t2) T) (ctx (term-bind x S1) 'Gamma~)))
    (conclusion ?('vdash~ (term-bind ('equiv~ ('lambda~ x S1 t1) 
                          ('lambda~ x S2 t2))
                       ('Pi~ x S1 T)) 'Gamma~)))
('Downarrow~ "q-app"                                    ; reduce type of app
    (premise2 ?('vdash~ (term-bind ('equiv~ t1 s1) ('Pi~ x S T)) 'Gamma~)
              ?('vdash~ (term-bind ('equiv~ t2 s2) S) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ (app t1 t2) 
                          (app s2 s2))
                       {'mapsto~ x t2 T}) 'Gamma~)))
('Downarrow~ "q-beta"                                   ; reduce app
    (premise2 ?('vdash~ (term-bind t T) (ctx (term-bind x S) 'Gamma~))
              ?('vdash~ (term-bind s S) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ (app ('lambda~ x S t) s)
                          {'mapsto~ x s t}) 
                       {'mapsto~ x t2 T}) 'Gamma~)))
('Downarrow~ "q-eta"
    (premise2 ?('vdash~ (term-bind t ('Pi~ x S T)) 'Gamma~)
              ?(free-var-huh (check-fv x t) ('bot~)))
    (conclusion ?('vdash~ (term-bind ('equiv~ ('lambda~ x T (app t (var x))) t)
                       ('Pi~ x S T)) 'Gamma~)))
('Downarrow~ "q-refl"
    (premise1 ?('vdash~ (term-bind t T) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ t t) T) 'Gamma~)))
('Downarrow~ "q-sym"
    (premise1 ?('vdash~ (term-bind ('equiv~ t s) T) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ s t) T) 'Gamma~)))
('Downarrow~ "q-trans"
    (premise2 ?('vdash~ (term-bind ('equiv~ s u) T) 'Gamma~)
              ?('vdash~ (term-bind ('equiv~ u t) T) 'Gamma~))
    (conclusion ?('vdash~ (term-bind ('equiv~ s t) T) 'Gamma~)))

; ---------------------------------------------
; proof checking algorithm

; ; strong normalization
; ; general β reduce
; ('Downarrow~ "beta-abs"
;     (premise1 ?('longrightarrow~-'beta~ t1 t2))
;     (conclusion ?('longrightarrow~-'beta~ ('lambda~ x S t1) 
;                        ('lambda~ x S t2))))
; ('Downarrow~ "beta-app1"
;     (premise1 ?('longrightarrow~-'beta~ t1 t2))
;     (conclusion ?('longrightarrow~-'beta~ (app t1 t) (app t2 t))))
; ('Downarrow~ "beta-app2"
;     (premise1 ?('longrightarrow~-'beta~ t1 t2))
;     (conclusion ?('longrightarrow~-'beta~ (app t t1) (app t t2))))
; ('Downarrow~ "beta-appabs"
;     ('mt~)
;     (conclusion ?('longrightarrow~-'beta~ (app ('lambda~ x T1 t1) t2))
;                        {'mapsto~ x t2 t1})))

; weak head reduction

; wh-appabs
('longrightarrow~-wh ?(wh-norm (app ('lambda~ x T1 t1) t2))
       {'mapsto~ x t2 t1})
[(wh-norm (app ('lambda~ x T1 t1) t2)) --> (do-subst-term x t2 t1)]
; wh-app1
[('longrightarrow~-wh ?(wh-norm (app t1 t2)) (app t1' t2)) <--
    ('longrightarrow~-wh !(wh-norm t1) t1')]

; top down checking? or we actually need bottom up checking?
; 'RightTeeVector~ means some term under some context is checked in LF system
; algorthmic kind formation Γ ⥛ K
; wfa-star
('RightTeeVector~ ?(LF-check 'Gamma~ ('star~)))
; wfa-pi
[('RightTeeVector~ !(LF-check 'Gamma~ (type-bind T ('star~))))
 ('RightTeeVector~ !(LF-check (ctx (term-bind x T) 'Gamma~) K))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('Pi~ x T K)))]
; Algorithmic kinding Γ ⥛ T::K
; ka-var
[('in~ (type-bind T K) 'Gamma~)
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (type-bind T K)))]
; ka-pi
[('RightTeeVector~ !(LF-check 'Gamma~ (type-bind T1 ('star~))))
 ('RightTeeVector~ !(LF-check (ctx (term-bind x T1) 'Gamma~) (type-bind T2 ('star~))))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (type-bind ('Pi~ x T1 T2) ('star~))))]
; ka-app
[('RightTeeVector~ !(LF-check 'Gamma~ (type-bind S ('Pi~ x T1 K))))
 ('RightTeeVector~ !(LF-check 'Gamma~ (term-bind t T2)))
 ('RightTeeVector~ 'Gamma~ ('equiv~ T1 T2))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (term-bind (type-app S t) {'mapsto~ x t K})))]
; how do I issue subst here? stupid way is:
[(type-bind S ('Pi~ x T1 K)) (term-bind t T2)
 ('equiv~ T1 T2)
    -->
    (do-subst-kind x t K)]
; algorithmic typing Γ ⥛ t : T
; ta-var
[('in~ (term-bind x T) 'Gamma~)
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (term-bind x T)))]
; ta-abs
[('RightTeeVector~ !(LF-check 'Gamma~ (type-bind S ('star~))))
 ('RightTeeVector~ !(LF-check (ctx (term-bind x S) 'Gamma~) (term-bind t T)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (term-bind ('lambda~ x S t) ('Pi~ x S T))))]
; ta-app
[('RightTeeVector~ !(LF-check 'Gamma~ (term-bind t1 ('Pi~ x S1 T))))
 ('RightTeeVector~ !(LF-check 'Gamma~ (term-bind t2 S2)))
 ('RightTeeVector~ 'Gamma~ ('equiv~ S1 S2))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ (term-bind (app t1 t2) {'mapsto~ x t2 T})))]
[(term-bind t1 ('Pi~ x S1 T)) (term-bind t2 S2)
 ('equiv~ S1 S2)
    -->
    (do-subst-type x t2 T)]

; alrogithmic kind equivalence Γ ⥛ K ≡ K'
; qka-star
('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ ('star~) ('star~))))
; qka-pi
[('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~ T1 T2)))
 ('RightTeeVector~ !(LF-check (ctx (term-bind x T1) 'Gamma~) ('equiv~ K1 K2)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ ('Pi~ x T1 K1)
                        ('Pi~ x T2 K2))))]
; algorithmic type equivalence Γ ⥛ S ≡ T :: K
; qta-var
('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ X X)))
; qta-pi
[('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~ S1 T1)))
 ('RightTeeVector~ !(LF-check (ctx (term-bind x T1) 'Gamma~) ('equiv~ S2 T2)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ ('Pi~ x S1 S2)
                        ('Pi~ x T1 T2))))]
; qta-app
[('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~ S1 S2)))
 ('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~ t1 t2)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ (type-app S1 t1) (type-app S2 t2))))]
; algorithmic term equivalence Γ ⥛ t1 ≡ t2 : T
; qa-wh
[('equiv~ s t) --> (wh-norm s) (wh-norm t)]
[('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~-wh {'longrightarrow~-wh (wh-norm s)}
                        {'longrightarrow~-wh (wh-norm t)})))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~ s t)))]
; qa-var
('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~-wh x x)))
; qa-abs
[('RightTeeVector~ !(LF-check (ctx (term-bind x S) 'Gamma~) ('equiv~ t1 t2)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~-wh ('lambda~ x S t1)
                           ('lambda~ x S t2))))]
; qa-app
[('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~-wh s1 s2)))
 ('RightTeeVector~ !(LF-check 'Gamma~ ('equiv~-wh t1 t2)))
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~-wh (app s1 t1) (app s2 t2))))]
; qa-nabs1
[('RightTeeVector~ !(LF-check (ctx (term-bind x S) 'Gamma~) ('equiv~ (app s x) t)))
 (term-not-'lambda~ s)
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~-wh s ('lambda~ x S t))))]
; qa-nabs2
[('RightTeeVector~ !(LF-check (ctx (term-bind x S) 'Gamma~) ('equiv~ s (app t x))))
 (term-not-'lambda~ t)
    -->
    ('RightTeeVector~ ?(LF-check 'Gamma~ ('equiv~-wh ('lambda~ x S s) t)))]


; ---------------------------------------------
; PREDEFINED RULES
; ---------------------------------------------
; Implemenation of intutionistic proof checking

[('qed~ p) --> (check-proof p)]

; popluating proof check request
[(check-proof (proof judegement rule-name (sub-proof1 sub-pf1)))
 -->
 (check-proof sub-pf1)]

[(check-proof (proof judegement rule-name (sub-proof2 sub-pf1 sub-pf2)))
 -->
 (check-proof sub-pf1)
 (check-proof sub-pf2)]

[(check-proof (proof judegement rule-name (sub-proof3 sub-pf1 sub-pf2 sub-pf3)))
 -->
 (check-proof sub-pf1)
 (check-proof sub-pf2) 
 (check-proof sub-pf3)]

; we can check whether a proof tree is valid using slog rule
; base case, if premise for a proof empty then it is valid
[(check-proof proof-obj)
 (= proof-obj
    (proof judegement rule-name ('mt~)))
 ('Downarrow~ rule-name ('mt~) (conclusion judegement))
 -->
 (theorem proof-obj)]

; inductive cases
; if all premise in a applied rule hold(or we say has a theorem/fact attach to it) then
; conclusion hold(is a theorem)
[(check-proof proof-obj)
 (= proof-obj
    (proof judegement rule-name
        (sub-proof1 (proof pr1 rule-for-pr1 rest-proof-pr1))))
 ('Downarrow~ rule-name (premise1 pr1) (conclusion judegement))
 (theorem (proof pr1 rule-for-pr1 rest-proof-pr1))
 -->
 (theorem proof-obj)]

[(check-proof proof-obj)
 (= proof-obj
    (proof judegement rule-name
        (sub-proof2 (proof pr1 rule-for-pr1 rest-proof-pr1)
                    (proof pr2 rule-for-pr2 rest-proof-pr2))))
 ('Downarrow~ rule-name (premise2 pr1 pr2) (conclusion judegement))
 (theorem (proof pr1 rule-for-pr1 rest-proof-pr1))
 (theorem (proof pr2 rule-for-pr2 rest-proof-pr2))
 -->
 (theorem proof-obj)]

[(check-proof proof-obj)
 (= proof-obj
    (proof judegement rule-name
        (sub-proof3 (proof pr1 rule-for-pr1 rest-proof-pr1)
                    (proof pr2 rule-for-pr2 rest-proof-pr2)
                    (proof pr3 rule-for-pr3 rest-proof-pr3))))
 ('Downarrow~ rule-name (premise2 pr1 pr2 pr3) (conclusion judegement))
 (theorem (proof pr1 rule-for-pr1 rest-proof-pr1))
 (theorem (proof pr2 rule-for-pr2 rest-proof-pr2))
 (theorem (proof pr3 rule-for-pr3 rest-proof-pr3))
 -->
 (theorem proof-obj)]

