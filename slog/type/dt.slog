
; pure first order dependent type ('lambda~LF)
; based on advance topic in type and programming language
; Charpter 2.2

; term
(LF-term ?(var x))
(LF-term ?('lambda~ x T t))
(LF-term ?(app t1 t2))

; term helper predicate
(term-not-'lambda~ ?(var x))
(term-not-'lambda~ ?(app func arg))

; types
(LF-type ?(type T))
[(LF-type ?('Pi~ x T K)) <-- (LF-type T) (LF-type K)]
[(LF-type ?(t-app T-func t-arg)) <--
    (LF-type T-func)
    (LF-term t-arg)]

; kind
; kind of proper type
('star~)
; kind of type family
('Pi~ "x" (type "T") ('star~))
(LF-kind ('star~))
[(LF-kind ?('Pi~ x T K)) <-- (LF-type T) (LF-kind K)]

; ---------------------------------------------
; typing rule helper functions

; predicate if binding is in an context
('in~ ?(ctx bind rest) bind)
[('in~ res bind1) --> ('in~ ?(ctx bind res) bind1)]

; NOTE subst here is not capture avoiding
; substitution for term in kind
(subst-kind ?(do-subst-kind x t ('star~)) ('star~))
[(subst-kind
    ?(do-subst-kind x t
        ('Pi~ xk T K))
    ('Pi~ xk T-substed K-substed)) <--
    (subst-type !(do-subst-type x t T) T-substed)
    (subst-kind !(do-subst-kind x t K) K-substed)]
; substitution for term in type
(subst-type ?(do-subst-type x t (type T-name)) (type T-name))
[(subst-type
    ?(do-subst-type x t
        ('Pi~ T-arg T-Targ T-body))
    ('Pi~ T-arg T-Targ-substed T-body-substed)) <--
    (subst-type !(do-subst-type x t T-Targ) T-Targ-substed)
    (subst-type !(do-subst-type x t T-body) T-body-substed)]
[(subst-type
    ?(do-subst-type x t
        (t-app T-func t-arg))
    (t-app T-func-substed t-arg-substed)) <--
    (subst-type !(do-subst-type x t T-func) T-func-substed)
    (subst-term !(do-subst-term x t t-arg) t-arg-substed)]
; substitution for term in term
(subst-term ?(do-subst-term x t (var x)) t)
[(=/= x y) --> (subst-term ?(do-subst-term x t (var y)) (var y))]
;
[(subst-term ?(do-subst-term x t ('lambda~ arg T-arg body))
    ('lambda~ arg T-arg-substed body-substed)) <--
    (subst-term !(do-subst-term x t body) body-substed)
    (subst-type !(do-subst-type x t T-arg) T-arg-substed)]
[(subst-term ?(do-subst-term x t (app func arg))
    (app func-substed arg-substed)) <--
    (subst-term !(do-subst-term x t func) func-substed)
    (subst-term !(do-subst-term x t arg) arg-substed)]

; materialize & rename, make it reads better
[('mapsto~ x t K K-substed) <-- (subst-kind (do-subst-kind x t K) K-substed)]
[('mapsto~ x t T T-substed) <-- (subst-type (do-subst-type x t T) T-substed)]
[('mapsto~ x t t t-substed) <-- (subst-term (do-subst-term x t t) t-substed)]

(wh-reducable ?(app ('lambda~ x T t1) t2))
(wh-reducable ?(app (app _ _) t2))

(wh-non-reducable ?(var x))
(wh-non-reducable ?('lambda~ x T t1))
; (wh-non-reducable ?('forall~ x T t))
(wh-non-reducable ?(app (var x) t2))
(wh-non-reducable ?(app ('forall~ x T t) t2))

; weak head reduction
; base case
[('longrightarrow~-wh ?(wh-norm t) t) <-- (wh-non-reducable t)]
; recursive case
[('longrightarrow~-wh (wh-norm t1) t2)
 (wh-non-reducable t2) -->
    (whnf t1 t2)]
[('longrightarrow~-wh ?(wh-norm (app t1 t2)) (app t1' t2)) <--
    ('longrightarrow~-wh !(wh-norm t1) t1')]
[(wh-norm (app ('lambda~ x T t1) t2)) --> (do-subst-term x t2 t1)]
('longrightarrow~-wh ?(wh-norm (app ('lambda~ x T t1) t2)) {'mapsto~ x t2 t1})
[('longrightarrow~-wh ?(wh-norm ('forall~ x T t)) ('forall~ x T norm-t)) <--
    ('longrightarrow~-wh !(wh-norm t) norm-t)]
; transitive
[('longrightarrow~-wh (wh-norm t1) t2)
 ('longrightarrow~-wh (wh-norm t2) t3) -->
    ('longrightarrow~-wh (wh-norm t1) t3)]

; evaluate wh-normal form for every app
(wh-norm ?(app ('lambda~ x T1 t1) t2))
(wh-norm ?(app t1 t2))
(wh-norm ?('forall~ x T t))

; ---------------------------------------------
; proof checking algorithm

; type inference
; "-infer" means some term **try** type (unchecked could be wrong),
; this rule will search all possible type for a term, based on
; algorithmic type checking rules.
; in inference stage, we use the observation from IncA paper, 
; decouple context creation and typing term creation

; populating context
[(top t) --> (term-in-ctx ('mt~) t)]
[(the t T) --> (term-in-ctx-bind ('mt~) (term-bind t T))]

[(term-in-ctx 'Gamma~ ('lambda~ x T t) ) -->
    (term-in-ctx (ctx (term-bind x T) 'Gamma~) t)
    (term-in-ctx 'Gamma~ T)]
[(term-in-ctx 'Gamma~ (app t1 t2)) -->
    (term-in-ctx 'Gamma~ t1)
    (term-in-ctx 'Gamma~ t2)]
[(term-in-ctx ('Pi~ x T K) 'Gamma~) -->
    (term-in-ctx 'Gamma~ T)
    (term-in-ctx (ctx (type-bind x T) 'Gamma~) K)]
[(term-in-ctx 'Gamma~ (t-app T-func t-arg)) -->
    (term-in-ctx 'Gamma~ T-func)
    (term-in-ctx 'Gamma~ t-arg)]
[(term-in-ctx 'Gamma~ ('forall~ x T t)) -->
    (term-in-ctx  (ctx (term-bind x T) 'Gamma~) t)
    (term-in-ctx 'Gamma~ T)]

; wfa-tm
[(term-in-ctx-bind 'Gamma~ (term-bind t T)) --> (term-in-ctx-bind 'Gamma~ (type-bind T ('star~)))]
; wfa-ty
[(term-in-ctx-bind 'Gamma~ (type-bind X K)) --> (term-in-ctx 'Gamma~ K)]
; I add another predicate to trace equiv in context
; [(term-in-ctx-eq 'Gamma~ ('equiv~ t1 t2)) --> (term-in-ctx 'Gamma~ t1) (term-in-ctx 'Gamma~ t2)]
; [(term-in-ctx-eq 'Gamma~ ('equiv~-wh t1 t2)) --> (term-in-ctx 'Gamma~ t1) (term-in-ctx 'Gamma~ t2)]
; [(term-in-ctx-bind 'Gamma~ (term-bind t T)) (LF-term t) --> (term-in-ctx 'Gamma~ t) (term-in-ctx 'Gamma~ T)]
; [(term-in-ctx-bind 'Gamma~ (type-bind T K)) (LF-type T) --> (term-in-ctx 'Gamma~ T) (term-in-ctx 'Gamma~ K)]
; sym
; [(term-in-ctx 'Gamma~ t1) (term-in-ctx 'Gamma~ t2) --> (term-in-ctx-eq 'Gamma~ ?('equiv~ t1 t2))]
; [(term-in-ctx 'Gamma~ t1) (term-in-ctx 'Gamma~ t2) --> (term-in-ctx-eq 'Gamma~ ?('equiv~-wh t1 t2))]
; [(term-in-ctx 'Gamma~ t) (term-in-ctx 'Gamma~ T) (LF-term t) --> (term-in-ctx-bind 'Gamma~ ?(term-bind t T))]
; [(term-in-ctx 'Gamma~ T) (term-in-ctx 'Gamma~ K) (LF-type T) --> (term-in-ctx-bind 'Gamma~ ?(type-bind T K))]

; Algorithmic kind information
; wfa-star
(checked ?(term-in-ctx 'Gamma~ ('star~)))
; wfa-pi
; this rule will syth type term
[(checked (term-in-ctx-bind 'Gamma~ (type-bind T ('star~))))
 (term-in-ctx (ctx (term-bind x T) 'Gamma~) K) -->
    (term-in-ctx 'Gamma~ ('Pi~ x T K))]

; Algorithmic kinding Γ ⥛ T::K
; ka-var
[('in~ 'Gamma~ (type-bind X K)) --> (checked ?(term-in-ctx-bind 'Gamma~ (type-bind X K)))]

; ka-pi
[(checked !(term-in-ctx-bind 'Gamma~ (type-bind T1 ('star~))))
 (checked !(term-in-ctx-bind (ctx (term-bind x T1) 'Gamma~) (type-bind T2 ('star~)))) -->
    (checked ?(term-in-ctx-bind 'Gamma~ (type-bind ('Pi~ x T1 T2) ('star~))))]

; ka-app
; how do I issue subst here? stupid way is:
[(term-in-ctx-bind 'Gamma~ (term-bind (t-app S t) K))
 (checked (term-in-ctx-bind 'Gamma~ (type-bind S ('Pi~ x T1 K))))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t T2))) -->
    (term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2))]
[(term-in-ctx-bind 'Gamma~ (term-bind (t-app S t) K))
 (checked (term-in-ctx-bind 'Gamma~ (type-bind S ('Pi~ x T1 K))))
 ; TODO: how do I know what equals T1, when should I issue this check?
 (checked (term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2)))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t T2))) -->
    (do-subst-kind x t K)
    ]
; then syntn the kind
[(term-in-ctx-bind 'Gamma~ (term-bind (t-app S t) K))
 (checked (term-in-ctx-bind 'Gamma~ (type-bind S ('Pi~ x T1 K))))
 (checked (term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2)))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t T2)))
 ('mapsto~ x t K new-K) -->
    ; synth term
    (term-in-ctx 'Gamma~ new-K)
    ; at the same tome accept the new binding
    (checked (term-in-ctx-bind 'Gamma~ (term-bind (t-app S t) new-K)))]

; algorithmic typing Γ ⥛ t : T
; ta-var
[('in~ 'Gamma~ (term-bind x T)) -->
    (checked ?(term-in-ctx-bind 'Gamma~ (term-bind (var x) T)))]

; ta-abs
; TODO: check this rule
; [(term-in-ctx 'Gamma~ ('lambda~ x S t)) -->
;     (term-in-ctx-bind 'Gamma~ ?(type-bind S ('star~)))
;     (term-in-ctx-bind ?(ctx (term-bind x S) 'Gamma~) ?(term-bind t T))]
[(checked (term-in-ctx-bind 'Gamma~ (type-bind S ('star~))))
 (term-in-ctx-bind (ctx (term-bind x S) 'Gamma~) (term-bind t T)) -->
 ; TODO: α equivalence?
    (checked (term-in-ctx-bind 'Gamma~ ?(term-bind ('lambda~ x S t) ('Pi~ _ S T))))]

; ta-app
[(term-in-ctx-bind (term-bind (app t1 t2) T))
 (term-in-ctx-bind 'Gamma~ (term-bind t1 ('Pi~ x S1 T)))
 (term-in-ctx-bind 'Gamma~ (term-bind t2 S2)) -->
    (term-in-ctx-eq 'Gamma~ ('equiv~ S1 S2))]
[(term-in-ctx-bind (term-bind (app t1 t2) T))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t1 ('Pi~ x S1 T))))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t2 S2)))
 (checked (term-in-ctx-eq 'Gamma~ ('equiv~ S1 S2))) -->
    (do-subst-type x t2 T)]
[(term-in-ctx-bind (term-bind (app t1 t2) T))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t1 ('Pi~ x S1 T))))
 (checked (term-in-ctx-bind 'Gamma~ (term-bind t2 S2)))
 (checked (term-in-ctx-eq 'Gamma~ ('equiv~ S1 S2))) -->
    ; synth term
    (checked (term-in-ctx-bind (term-bind (app t1 t2) {'mapsto~ x t2 T})))]


; alrogithmic kind equivalence Γ ⥛ K ≡ K'
; qka-star
(checked ?(term-in-ctx-eq ('equiv~ ('star~) ('star~))))
; qka-pi
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2)))
 (checked !(term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ K1 K2)))
    -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x T1 K1) ('Pi~ x T2 K2))))]
; genrate eq
[(checked (term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2)))
 (checked (term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ K1 K2)))
 (term-in-ctx 'Gamma~ ('Pi~ x T1 K1))
    -->
    (checked (term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x T1 K1) ('Pi~ x T2 K2))))]
[(checked (term-in-ctx-eq 'Gamma~ ('equiv~ T1 T2)))
 (checked (term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ K1 K2)))
 (term-in-ctx 'Gamma~ ('Pi~ x T2 K2))
    -->
    (checked (term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x T1 K1) ('Pi~ x T2 K2))))]

; algorithmic type equivalence Γ ⥛ S ≡ T :: K
; qta-var
; (term-bind _ X) ?
(checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ X X)))
; TODO: this shoudl be t-var
[(term-in-ctx 'Gamma~ (var X)) --> (checked (term-in-ctx-eq 'Gamma~ ('equiv~ (var X) (var X))))]

; qta-pi
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1)))
 (checked !(term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ S2 T2))) -->
    ; TODO: α equivalence?
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) ('Pi~ _ T1 T2))))]
[(checked (term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1)))
 (checked (term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ S2 T2)))
 (term-in-ctx 'Gamma~ ('Pi~ x S1 S2)) -->
    (checked (term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) ('Pi~ x T1 T2))))]
[(checked (term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1)))
 (checked (term-in-ctx-eq (ctx (term-bind x T1) 'Gamma~) ('equiv~ S2 T2)))
 (term-in-ctx 'Gamma~ ('Pi~ x S1 S2)) -->
    (checked (term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) ('Pi~ x T1 T2))))]
; qta-app
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ S1 S2)))
 (checked !(term-in-ctx-eq 'Gamma~ ('equiv~ t1 t2))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ (t-app S1 t1) (t-app S2 t2))))]
; algorithmic term equivalence Γ ⥛ t1 ≡ t2 : T
; qa-wh
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~-wh {whnf s} {whnf t}))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ s t)))]

; qa-var
(checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh x x)))
; qa-abs
[(checked !(term-in-ctx-eq (ctx (term-bind x S) 'Gamma~) ('equiv~ t1 t2))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh ('lambda~ x S t1) ('lambda~ x S t2))))]
; qa-app
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~-wh s1 s2)))
 (checked !(term-in-ctx-eq 'Gamma~ ('equiv~-wh t1 t2))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh (app s1 t1) (app s2 t2))))]
; qa-nabs1
; TODO: this is very confusing rule ...
[(checked !(term-in-ctx-eq (ctx (term-bind x S) 'Gamma~) ('equiv~ (app s (var x)) t)))
 (term-not-'lambda~ s) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh s ('lambda~ x S t))))]
; qa-nabs2
[(checked !(term-in-ctx-eq (ctx (term-bind x S) 'Gamma~) ('equiv~ s (app t (var x)))))
 (term-not-'lambda~ t) -->
   (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh ('lambda~ x S s) t)))]

; ---------------------------------------------
; algorithmic type checking for CC
(LF-type (Prop))
(LF-type (Prf))
[(LF-term ?('forall~ x T t)) <-- (LF-type T) (LF-term t)]

; ka-prop
(checked ?(term-in-ctx-bind 'Gamma~ (type-bind (Prop) ('star~))))
(checked ?(term-in-ctx-bind 'Gamma~ (type-bind (Prf) ('Pi~ _ (Prop) ('star~)))))
; ka-prf
[(checked !(term-in-ctx-bind 'Gamma~ (term-bind t (Prop)))) -->
    (checked ?(term-in-ctx-bind 'Gamma~ (type-bind (t-app (Prf) t) ('star~))))]
[(checked (term-in-ctx-bind 'Gamma~ (term-bind t (Prop))))
 (term-in-ctx 'Gamma~ (t-app (Prf) t)) -->
    (checked (term-in-ctx-bind 'Gamma~ (type-bind (t-app (Prf) t) ('star~))))]
; qt-all-e
[(checked !(term-in-ctx-bind 'Gamma~ (type-bind T ('star~))))
 (checked !(term-in-ctx-bind (ctx (term-bind x T) 'Gamma~) (term-bind t (Prop)))) -->
    (checked ?(term-in-ctx-bind 'Gamma~ (term-bind ('forall~ x T t) (Prop))))]
[(checked (term-in-ctx-bind 'Gamma~ (type-bind T ('star~))))
 (checked (term-in-ctx-bind (ctx (term-bind x T) 'Gamma~) (term-bind t (Prop))))
 (term-in-ctx 'Gamma~ (term-bind ('forall~ x T t))) -->
    (checked (term-in-ctx-bind 'Gamma~ (term-bind ('forall~ x T t) (Prop))))]
; qka-pi-prf
[(term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) (t-app (Prf) t)))
 ('longrightarrow~-wh (wh-norm t) ('forall~ x T1 t2)) -->
    (term-in-ctx-eq (ctx (term-bind x S1) 'Gamma~) ('equiv~ S2 (t-app (Prf) t2)))
    (term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1))]
[(checked (term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1)))
 (checked (term-in-ctx-eq (ctx (term-bind x S1) 'Gamma~) ('equiv~ S2 (t-app (Prf) t2))))
 ('longrightarrow~-wh (wh-norm t) ('forall~ x T1 t2)) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) (t-app (Prf) t))))]

; qka-prf-pi
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ ('Pi~ x S1 S2) (t-app (Prf) t)))) -->
   (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ (t-app (Prf) t) ('Pi~ x S1 S2))))]
; qka-prf
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ s t))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~ (t-app (Prf) s) (t-app (Prf) t))))]
; qa-all-e
[(checked !(term-in-ctx-eq 'Gamma~ ('equiv~ S1 T1)))
 (checked !(term-in-ctx-eq (ctx (term-bind x S1) 'Gamma~) ('equiv~ s t))) -->
    (checked ?(term-in-ctx-eq 'Gamma~ ('equiv~-wh ('forall~ x S1 s) ('forall~ x T1 t))))]

; generate algorithmaic type judgements
; [(LF-check 'Gamma~ ?(term-bind x T)) <-- (term-in-ctx 'Gamma~ t)]
; [(LF-check 'Gamma~ ?(type-bind x T)) <-- (term-in-ctx 'Gamma~ t)]

; generate equality check for all type
; [('equiv~-infer t) <-- (LF-type t)]
; [('equiv~-wh-infer t) <-- (LF-term t)]
; ---------------------------------------------
; encode Nat theory in LF

; I use a macro expansion like helper rule 'macro~ to make proof term reads easier
; pretty print for "macro" is ⇻
; pretty print for §
('macro~ ?('expand~ (var x)) (var x))
[('macro~ ?('expand~ ('lambda~ x T s))
    ('lambda~ x T-expanded s-expanded)) <--
    ('macro~ !('expand~ T) T-expanded)
    ('macro~ !('expand~ s) s-expanded)]
[('macro~ ?('expand~ (app func arg))
    (app func-expanded arg-expanded)) <--
    ('macro~ !('expand~ func) func-expanded)
    ('macro~ !('expand~ arg) arg-expanded)]
('macro~ ?('expand~ (type t)) (type t))
[('macro~ ?('expand~ ('Pi~ x T-arg T-body))
    ('Pi~ x T-arg-expanded T-body-expanded)) <--
    ('macro~ !('expand~ T-arg) T-arg-expanded)
    ('macro~ !('expand~ T-body) T-body-expanded)]
[('macro~ ?('expand~ (t-app func arg))
    (t-app func-expanded arg-expanded)) <--
    ('macro~ !('expand~ func) func-expanded)
    ('macro~ !('expand~ arg) arg-expanded)]
('macro~ ?('expand~ ('star~)) ('star~))
[('macro~ ?('expand~ ('forall~ x T t))
    ('forall~ x T-expanded t-expanded)) <--
    ('macro~ !('expand~ T) T-expanded)
    ('macro~ !('expand~ t) t-expanded)]
('macro~ ?('expand~ (Prop)) (Prop))
('macro~ ?('expand~ (Prf)) (Prf))
[('macro~ ?('expand~ ('equiv~ x y))
    ('equiv~ x y)) <--
    ('macro~ !('expand~ x) x-expanded)
    ('macro~ !('expand~ y) y-expanded)]
[('macro~ ?('expand~ (term-bind x T))
    (term-bind x-expanded T-expanded)) <--
    ('macro~ !('expand~ T) T-expanded)
    ('macro~ !('expand~ x) x-expanded)]
[('macro~ ?('expand~ (type-bind T K))
    (type-bind T-expanded K-expanded)) <--
    ('macro~ !('expand~ K) K-expanded)
    ('macro~ !('expand~ T) T-expanded)]

; use arrow to abbreviation
; 'longrightarrow~ A B = 'Pi~ x A B
[('macro~ ?('expand~ ('longrightarrow~ x A B))
    ('Pi~ x A-expanded B-expanded)) <--
    ('macro~ !('expand~ A) A-expanded)
    ('macro~ !('expand~ B) B-expanded)]
[('macro~ ?('expand~ (Proof a)) (t-app (Prf) a-expanded)) <--
    ('macro~ !('expand~ a) a-expanded)]

; expansion check
[(expansion-error t) <-- ('expand~ t) (~ 'macro~ ('expand~ t) _)]

[(term-in-ctx-bind _ (term-bind t _)) --> (bounded-term t)]
[(term-in-ctx-bind _ (type-bind t _)) --> (bounded-term t)]
[(unchecked t) <-- (term-in-ctx _ t) (~ bounded-term t)]
[(type-error b) <-- (term-in-ctx-bind 'Gamma~ b) (~ checked (term-in-ctx-bind 'Gamma~ b))]

[('equiv~ t1 t2) (=/= t1 t2) --> (nonref-equiv t1 t2)]

[(TERM _ t) --> (top t)]

; nat = all a:Prop.all z:Prf a.all s:Prf a →Prf a. a
('macro~ ('expand~ ('nat~)) {'macro~ !('expand~ 
    ('forall~ "a" (Prop)
        ('forall~ "z" (Proof (var "a"))
            ('forall~ "s" ('longrightarrow~ "x" (Proof (var "a")) (Proof (var "a")))
                    (var "a")))))})


; (type-error (type-bind ('forall~ "a" (Prop ) ('forall~ "z" (t-app (Prf ) (var "a")) ('forall~ "s" ('Pi~ "x" (t-app #25) (t-app #25)) (var "a")))) ('star~ )))
(the {'macro~ !('expand~ ('nat~))}
     (Prop))

[(print "pass" {term-bind {'macro~ ('expand~ ('nat~))}}) <-- (checked (term-in-ctx-bind _ (term-bind {'macro~ ('expand~ ('nat~))} T)))]


; zero = λa:Prop.λz:Prf a.λs:Prf a → Prf a.z : Prf nat
('macro~ ('expand~ (zero)) {'macro~ !('expand~
    ('lambda~ "a" (Prop)
        ('lambda~ "z" (Proof (var "a"))
            ('lambda~ "s" ('longrightarrow~ "x" (Proof (var "a")) (Proof (var "a")))
                (var "z")))))})
(the {'macro~ !('expand~ (zero))}
     {'macro~ !('expand~ (Proof ('nat~)))})

(type-error (term-bind ('lambda~ "a" (Prop ) ('lambda~ "z" (t-app (Prf ) (var "a")) ('lambda~ "s" ('Pi~ "x" (t-app #13) (t-app #13)) (var "z"))))
               (t-app (Prf ) ('forall~ "a" (Prop ) ('forall~ "z" (t-app (Prf #49) (var #45)) ('forall~ "s" ('Pi~ #23) (var #45)))))))

; here we treat succ as a function
; succ = λn:Prf nat.λa:Prop. λz:Prf a.
;           λs:Prf a → Prf a.s(n a z s) : Prf nat → Prf nat
('macro~ ('expand~ (succ)) {'macro~ !('expand~
    ('lambda~ "n" (Proof ('nat~))
        ('lambda~ "a" (Prop)
            ('lambda~ "z" (Proof (var "a"))
                ('lambda~ "s" ('longrightarrow~ "x" (Proof (var "a")) (Proof (var "a")))
                    (app (var "s")
                        (app (app (app (var "n") (var "a")) (var "z")) (var "s")))))))
       )})
[('macro~ ('expand~ ?(Suc n)) (app succ-expanded n-expanded)) <--
    ('macro~ !('expand~ (succ)) succ-expanded)
    ('macro~ !('expand~ n) n-expanded)]
; (TERM "succ" {'macro~ !('expand~ (succ))})
; (TERM "one" {'macro~ !('expand~
;     (Suc (zero)))})
; (print-one-type {term-bind {TERM "one"}})

; (theorem "succ-zero-is-proof-nat"
;     ?('equiv~ {term-bind {TERM "one"}}
;         {'macro~ !('expand~ (Proof ('nat~)))}))

; (print-suc {'macro~ !('expand~ (Suc (zero)))})

; (term-bind (var "a") (Prop ))
; (term-bind (var "n")
;    (t-app (Prf )
;     ('forall~ "a" (Prop )
;         ('forall~ "z" (t-app (Prf ) (var "a"))
;             ('forall~ "s" ('Pi~ "x" (t-app #20) (t-app #20))
;                 (var "a"))))))

; (print-type-n-eq
;     ('Pi~ "a" (Prop )
;         ('Pi~ "z" (t-app (Prf ) (var "a"))
;             ('Pi~ "s" ('Pi~ "x" (t-app (Prf #18) (var #25))
;                         (t-app (Prf #18) (var #25)))
;                 (t-app (Prf ) (var "a"))))))
