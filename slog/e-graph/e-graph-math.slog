; Max's math benchmark

; start_exprs: vec![
;     "(i (ln x) x)",
;     "(i (+ x (cos x)) x)",
;     "(i (* (cos x) x) x)",
;     "(d x (+ 1 (* 2 x)))",
;     "(d x (- (pow x 3) (* 7 (pow x 2))))",
;     "(+ (* y (+ x y)) (- (+ x 2) (+ x x)))",
;     "(/ 1 (- (/ (+ 1 (sqrt five)) 2) (/ (- 1 (sqrt five)) 2)))",
; ],

(math-app-2 "i" (math-app-1 "ln" (math-var "x")) (math-var "x"))
(math-app-2 "i"
    (math-app-2 "+"
        (math-var "x")
        (math-app-1 "cos" (math-var "x")))
    (math-var "x"))
(math-app-2 "i"
    (math-app-2 "*" 
        (math-app-1 "cos" (math-var "x"))
        (math-var "x"))
    (math-var "x"))
(math-app-2 "d"
    (math-var "x")
    (math-app-2 "+"
        (math-num 1) (math-app-2 "*" (math-num 2) (math-var "x"))))
(math-app-2 "d"
    (math-var "x") 
    (math-app-2 "-" 
        (math-app-2 "pow" (math-var "x") (math-num 2))
        (math-app-2 "*"
            (math-num 7)
            (math-app-2 "pow" (math-var "x") (math-num 2)))))
(math-app-2 "+"
    (math-app-2 "*"
        (math-var "y")
        (math-app-2 "+" (math-var "x") (math-var "y")))
    (math-app-2 "-" 
        (math-app-2 "+" (math-var "x") (math-num 2))
        (math-app-2 "+" (math-var "x") (math-var "x"))))
(math-app-2 (math-op "/")
    (math-num 1)
    (math-app-2 "-"
        (math-app-2 "/"
            (math-app-2 "+" (math-num 1) (math-app-1 "sqrt" (math-num 5)))
            (math-num 2))
        (math-app-2 "/"
            (math-app-2 "-" (math-num 1) (math-app-1 "sqrt" (math-num 5)))
            (math-num 2))))

; rw!("comm-add";  "(+ ?a ?b)"        => "(+ ?b ?a)"),
; rw!("comm-mul";  "(* ?a ?b)"        => "(* ?b ?a)"),
(commutative-op "+")
(commutative-op "*")
[(e-implies ?(math-app-2 op l r) (math-app-2 op r l)) <--
    (commutative-op op)]

; rw!("assoc-add"; "(+ ?a (+ ?b ?c))" => "(+ (+ ?a ?b) ?c)"),
; rw!("assoc-mul"; "(* ?a (* ?b ?c))" => "(* (* ?a ?b) ?c)"),
(associative-op "+")
(associative-op "*")
[(e-implies ?(math-app-2 op a (math-app-2 op b c))
           (math-app-2 op (math-app-2 op a b) c)) <--
    (associative-op op)]

; rw!("sub-canon"; "(- ?a ?b)" => "(+ ?a (* -1 ?b))"),
(e-implies ?(math-app-2 "-" a b) (math-app-2 "+" a (math-app-2 "*" (math-num -1) b)))
; rw!("div-canon"; "(/ ?a ?b)" => "(* ?a (pow ?b -1))" if is_not_zero("?b")),
(e-implies ?(math-app-2 "/"a b) (math-app-2 "*" a (math-app-2 "pow" (math-num -1) b)))
; // rw!("canon-sub"; "(+ ?a (* -1 ?b))"   => "(- ?a ?b)"),
; // rw!("canon-div"; "(* ?a (pow ?b -1))" => "(/ ?a ?b)" if is_not_zero("?b")),

; rw!("zero-add"; "(+ ?a 0)" => "?a"),
(e-implies ?(math-app-2 "+" a 0) a)
; rw!("zero-mul"; "(* ?a 0)" => "0"),
(e-implies ?(math-app-2 "*" a 0) (math-num 0))
; rw!("one-mul";  "(* ?a 1)" => "?a"),
(e-implies ?(math-app-2 "*" a 1) a)

; do we need this?
; rw!("add-zero"; "?a" => "(+ ?a 0)"),
; rw!("mul-one";  "?a" => "(* ?a 1)"),

; rw!("cancel-sub"; "(- ?a ?a)" => "0"),
(e-implies ?(math-app-2 "-" a a) (math-num 0))
; rw!("cancel-div"; "(/ ?a ?a)" => "1" if is_not_zero("?a")),
(e-implies ?(math-app-2 "/"a a) (math-num 1))

; rw!("distribute"; "(* ?a (+ ?b ?c))"        => "(+ (* ?a ?b) (* ?a ?c))"),
; rw!("factor"    ; "(+ (* ?a ?b) (* ?a ?c))" => "(* ?a (+ ?b ?c))"),
(e-implies ?(math-app-2 "*" a (math-app-2 "+" b c))
            (math-app-2 "+" 
                (math-app-2 "*" a b)
                (math-app-2 "*" a c)))
(e-implies ?(math-app-2 "+" 
                (math-app-2 "*" a b)
                (math-app-2 "*" a c))
            (math-app-2 "*" a (math-app-2 "+" b c)))

; rw!("pow-mul"; "(* (pow ?a ?b) (pow ?a ?c))" => "(pow ?a (+ ?b ?c))"),
(e-implies ?(math-app-2 "*"
                (math-app-2 "pow" a b)
                (math-app-2 "pow" a c))
            (math-app-2 "pow"
                a
                (math-app-2 "+"  b c)))
; rw!("pow0"; "(pow ?x 0)" => "1"
;     if is_not_zero("?x")),
[(e-implies ?(math-app-2 x (math-num 0)) (math-num 1)) <--
    (=/= x 0)]
; rw!("pow1"; "(pow ?x 1)" => "?x"),
(e-implies ?(math-app-2 x (math-num 1)) x)
; rw!("pow2"; "(pow ?x 2)" => "(* ?x ?x)"),
(e-implies ?(math-app-2 x (math-num 2)) (math-app-2 "*" x x))
; rw!("pow-recip"; "(pow ?x -1)" => "(/ 1 ?x)"
;     if is_not_zero("?x")),
; TODO: need negative number
; (e-implies ?(math-app-2 x (math-num -1)) (math-app-2 "/"(math-num 1) x))

; rw!("recip-mul-div"; "(* ?x (/ 1 ?x))" => "1" if is_not_zero("?x")),
; TODO: add a `type-check` builtin?
(e-implies ?(math-app-2 "*"    
                x
                (math-app-2 "/"(math-num 1) x))
            (math-num 1))

; rw!("d-variable"; "(d ?x ?x)" => "1" if is_sym("?x")),
(e-implies ?(math-app-2 "d" x x) (math-num 1))

; rw!("d-constant"; "(d ?x ?c)" => "0" if is_sym("?x") if is_const_or_distinct_var("?c", "?x")),
(e-implies ?(math-app-2 "d" x (math-num _)) (math-num 0))

; rw!("d-add"; "(d ?x (+ ?a ?b))" => "(+ (d ?x ?a) (d ?x ?b))"),
(e-implies ?(math-app-2 "d" x (math-app-2 "+" a b))
            (math-app-2 "+"
                (math-app-2 "d" x a)
                (math-app-2 "d" x b)))
; rw!("d-mul"; "(d ?x (* ?a ?b))" => "(+ (* ?a (d ?x ?b)) (* ?b (d ?x ?a)))"),
(e-implies ?(math-app-2 "d" x (math-app-2 "d" a b)))
; rw!("d-sin"; "(d ?x (sin ?x))" => "(cos ?x)"),
(e-implies ?(math-app-2 "d" x (math-app1 "sin" x))
            (math-app-1 "cos" x))
; rw!("d-cos"; "(d ?x (cos ?x))" => "(* -1 (sin ?x))"),
; TODO: need negative
(e-implies ?(math-app-2 "d" x (math-app1 "cos" x))
            (math-app-2 "*" (math-num -1) (math-app-1 "sin" x)))
; rw!("d-ln"; "(d ?x (ln ?x))" => "(/ 1 ?x)" if is_not_zero("?x")),
(e-implies ?(math-app-2 "d" x (math-app-1 "ln" x))
            (math-app-2 "/" (math-num 1) x))

; rw!("d-power";
;     "(d ?x (pow ?f ?g))" =>
;     "(* (pow ?f ?g)
;         (+ (* (d ?x ?f)
;                 (/ ?g ?f))
;             (* (d ?x ?g)
;                 (ln ?f))))"
;     if is_not_zero("?f")
;     if is_not_zero("?g")
; ),
(e-implies ?(math-app-2 "d" x (math-app-2 "pow" f g))
            (math-app-2 "*"
                (math-app-2 "pow" f g)
                (math-app-2 "+"
                    (math-app-2 "*"
                        (math-app-2 "d" x f)
                        (math-app-2 "/" g f))
                    (math-app-2 "*"
                        (math-app-2 "d" x g)
                        (math-app-1 "ln" f)))))

; rw!("i-one"; "(i 1 ?x)" => "?x"),
(e-implies ?(math-app-2 "i" (math-num 1) x) x)
; rw!("i-power-const"; "(i (pow ?x ?c) ?x)" =>
;     "(/ (pow ?x (+ ?c 1)) (+ ?c 1))" if is_const("?c")),
(e-implies ?(math-app-2 "i" (math-app-2 "pow" x c) x)
            (math-app-2 "/"
                (math-app-2 "pow" x (math-app-2 "+" c 1))
                (math-app-2 "+" c 1)))
; rw!("i-cos"; "(i (cos ?x) ?x)" => "(sin ?x)"),
(e-implies ?(math-app-2 "i" (math-app-1 "cos" x) x)
            (math-app-1 "sin" x))
; rw!("i-sin"; "(i (sin ?x) ?x)" => "(* -1 (cos ?x))"),
(e-implies ?(math-app-2 "i" (math-app-2 "sin" x) x)
            (math-app-2 "*" (math-num -1) (math-app-1 "cos" x)))
; rw!("i-sum"; "(i (+ ?f ?g) ?x)" => "(+ (i ?f ?x) (i ?g ?x))"),
(e-implies ?(math-app-2 "i" (math-app-2 "+" f g) x)
            (math-app-2 "+"
                (math-app-2 "i" f x)
                (math-app-2 "i" g x)))
; rw!("i-dif"; "(i (- ?f ?g) ?x)" => "(- (i ?f ?x) (i ?g ?x))"),
(e-implies ?(math-app-2 "i" (math-app-2 "-" f g) x)
            (math-app-2 "-" (math-app-2 "i" f x) (math-app-2 "i" g x)))
; rw!("i-parts"; "(i (* ?a ?b) ?x)" =>
;     "(- (* ?a (i ?b ?x)) (i (* (d ?x ?a) (i ?b ?x)) ?x))"),
(e-implies ?(math-app-2 "i" (math-app-2 "*" a b) x)
            (math-app-2 "-"
                (math-app-2 "*" a (math-app "i" b x))
                (math-app-2 "i"
                    (math-app-2 "*" (math-app-2 "d" x a) (math-app-2 "i" b x))
                    x)))

; const fold
(e-implies ?(math-app-2 "+" (math-num a) (math-num b)) (math-num {+ a b}))
(e-implies ?(math-app-2 "-" (math-num a) (math-num b)) (math-num {- a b}))
(e-implies ?(math-app-2 "*" (math-num a) (math-num b)) (math-num {* a b}))

; ; transitive
; [(e-implies a b) (e-implies b c) --> (e-implies a c)]

; ; recursive
; (e-implies ?(math-app-1 op a) (math-app-1 op {e-implies a}))
; (e-implies ?(math-app-2 op a b) (math-app-2 op {e-implies a} b))
; (e-implies ?(math-app-2 op a b) (math-app-2 op a {e-implies b}))
; (e-implies ?(math-app-2 op a b) (math-app-2 op {e-implies a} {e-implies b}))

