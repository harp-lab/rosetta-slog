; a example of e matching in slog

; target language 
; number:=  <DIGIT>+
; var := <ALPH>
; op    := {*, /, <<}
; calc-expression-1 := var | number
; calc-expression-3 :=  \(op calc-expression  calc-expression\)

; test case
; (/ (* a 2) 2)
(ast
    (calc-expr-3 "/"
        (calc-expr-3 "*"
            (var "a") (num 2))
        (num 2)))

; -->
; union rule
(e-union ?(calc-expr-3 "*" l (num 2))
          (calc-expr-3 "<<" l (num 1)))

(e-union ?(calc-expr-3 "/" (calc-expr-3 "*" x y) z)
          (calc-expr-3 "/" x (calc-expr-3 "*" y z)))

(e-union ?(calc-expr-3 "/" x x) (num 1))
(e-union ?(calc-expr-3 "*" x (num 1)) x)


; (e-union ?(calc-expr-3 op l r) (calc-expr-3 op {e-union l} r))
; (e-union ?(calc-expr-3 op l r) (calc-expr-3 op l {e-union r}))
; [(e-union a b) (e-union b c) --> (e-union a c)]

; HOLE is a dummy AST element like ? in egg
; input-pattern is unique to make it has less output
(input-pattern
    (p-calc-expr-3 "/"
        (p-calc-expr-3 "<<"
            (p-var "a") (HOLE))
        (HOLE)))

; (input-pattern
;     (var "a"))

[(do-match p e) <-- (input-pattern p) (ast e)]

; theoratical this should be bi-directional, but it may cause slog run forever
(e-match ?(do-match p e) {e-union e})
[(e-match ?(do-match p e) eu) <-- (e-union eu e)]

[(e-match ?(do-match p e) matched-eu) <--
    (e-match !(do-match p eu) matched-eu)
    (e-union e eu)]

; HOLE is like wildcard, it matches anything
(e-match ?(do-match (HOLE) e) e)

[(e-match ?(do-match (HOLE) (calc-expr-3 op l r))
          (calc-expr-3 op matched-l matched-r))
    <--
    (e-match !(do-match (HOLE) l) matched-l)
    (e-match !(do-match (HOLE) r) matched-r)]

(e-match ?(do-match (p-var x) (var x)))
(e-match ?(do-match (p-num x) (num x)))

[(e-match ?(do-match (p-calc-expr-3 o pl pr)
                     (calc-expr-3 o l r))
          (calc-expr-3 o matched-l matched-r)) <--
    (e-match !(do-match pl l) matched-l)
    (e-match !(do-match pr r) matched-r)]

; output e-match query resut
[(output-match {e-match (do-match p e)}) <-- (input-pattern p) (ast e)]

; https://arxiv.org/pdf/2108.02290.pdf Using Definition here:
; Database formed by a slog progam with `e-union` transitive equality relation is a E-Graph
;   where:
;   E-Class is a tuple, in which all columns have E-Node/E-Class relation type. It represents a complex term.
;   E-Node is a fact represent an atomic term.
;
; Definition can be wittnessed by:
; 1. 𝐶 is a set of e-classes over 𝐸 which is a set of e-nodes; 𝐼 is a set of e-class ids.
;   where:
;   id is the hidden id column of a slog relation
; 2. A union-find [Tarjan 1975] data structure 𝑈 stores an equivalence relation (denoted with
;    ≡id) over e-class ids. The union-find provides a function find that canonicalizes e-class ids
;    such that find(𝑖1) = find(𝑖2) ⇐⇒ 𝑖1 ≡id 𝑖2. An e-class id 𝑖 is canonical if 𝑖 = find(𝑖).
;   where:
;   `find` is query clause `{e-union i}` , because for all i1 i2, if `e-union` is transitive, they will
;   always produce same result set
;   NOTE: in souffle, we can define such relation with data structure `eqrel`
; 3. The e-class map 𝑀 is a surjective function that maps e-class ids to e-classes. All equivalent
;    e-class ids map to the same e-class, i.e., 𝑎 ≡id 𝑏 iff 𝑀 [𝑎] is the same set as 𝑀 [𝑏]. An e-class
;    id 𝑎 is said to refer to the e-class 𝑀 [find(𝑎)].
;   where:
;   id in slog is hidden, so no implicit way to map, but e-class is recursive data structure, we can use
;   (<e-class> (<e-class> col... ) col...) to query the sub structure `e-class` of a known `e-class`
; 4. A function lookup that maps e-node 𝑛 to an id of e-class that contains it: 𝑛 ∈ 𝑀 [lookup(𝑛)].
;   where 
;   `lookup` is query clause `?(<e-class> col... )`

